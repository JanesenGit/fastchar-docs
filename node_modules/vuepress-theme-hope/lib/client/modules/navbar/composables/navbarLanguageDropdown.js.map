{"version":3,"file":"navbarLanguageDropdown.js","sourceRoot":"","sources":["../../../../../src/client/modules/navbar/composables/navbarLanguageDropdown.ts"],"names":[],"mappings":"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","sourcesContent":["import { entries, keys, useRoutePaths } from \"@vuepress/helper/client\";\nimport { computedWithControl } from \"@vueuse/core\";\nimport type { ComputedRef, WatchSource } from \"vue\";\nimport { useRoute, useRouteLocale, useSiteLocaleData } from \"vuepress/client\";\n\nimport {\n  useThemeData,\n  useThemeLocaleData,\n} from \"@theme-hope/composables/index\";\n\nimport type { AutoLinkOptions, NavGroup } from \"../../../../shared/index.js\";\n\ndeclare const __VUEPRESS_DEV__: boolean;\n\n/**\n * Get navbar config of select language dropdown\n */\nexport const useNavbarLanguageDropdown =\n  (): ComputedRef<NavGroup<AutoLinkOptions> | null> => {\n    const routePaths = useRoutePaths();\n    const route = useRoute();\n    const routeLocale = useRouteLocale();\n    const siteLocale = useSiteLocaleData();\n    const themeData = useThemeData();\n    const themeLocale = useThemeLocaleData();\n\n    return computedWithControl(\n      __VUEPRESS_DEV__\n        ? <WatchSource>(\n            (() => [\n              route.path,\n              siteLocale.value.locales,\n              themeData.value.extraLocales,\n              themeLocale.value.navbarLocales,\n            ])\n          )\n        : <WatchSource>(() => route.path),\n      () => {\n        const localePaths = keys(siteLocale.value.locales);\n        const extraLocales = entries(themeData.value.extraLocales ?? {});\n\n        // Do not display language selection dropdown if there is only one language\n        if (localePaths.length < 2 && !extraLocales.length) return null;\n\n        const { path, fullPath } = route;\n        const { navbarLocales } = themeLocale.value;\n\n        const languageDropdown: NavGroup<AutoLinkOptions> = {\n          text: \"\",\n          ariaLabel: navbarLocales?.selectLangAriaLabel,\n          children: [\n            ...localePaths.map((targetLocalePath) => {\n              // Target locale config of this language link\n              const targetSiteLocale =\n                siteLocale.value.locales?.[targetLocalePath] ?? {};\n              const targetThemeLocale =\n                themeData.value.locales?.[targetLocalePath] ?? {};\n              const targetLang = targetSiteLocale.lang || \"\";\n\n              const text =\n                targetThemeLocale.navbarLocales?.langName ?? targetLang;\n              let link;\n\n              // If the target language is current language\n              if (targetLang === siteLocale.value.lang) {\n                // Stay at current link\n                link = path;\n              }\n              // If the target language is not current language\n              else {\n                const targetLocalePage = path.replace(\n                  routeLocale.value,\n                  targetLocalePath,\n                );\n\n                // try to link to the corresponding page of current page\n                link = routePaths.value.some(\n                  (item) => item === targetLocalePage,\n                )\n                  ? // try to keep current hash across languages\n                    fullPath.replace(path, targetLocalePage)\n                  : // Or fallback to homepage\n                    targetThemeLocale.home ?? targetLocalePath;\n              }\n\n              return {\n                text,\n                link,\n              };\n            }),\n            ...extraLocales.map(([text, path]) => ({\n              text,\n              link: path.replace(\n                \":route\",\n                route.path.replace(routeLocale.value, \"\"),\n              ),\n            })),\n          ],\n        };\n\n        return languageDropdown;\n      },\n    );\n  };\n"]}