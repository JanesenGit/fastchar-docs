const p=(e,c,g=[])=>{for(let t=1,i=e.length;t<i-1;t++){const r=e[t],{content:s,type:a}=r;if(a!=="text"||g.includes(s))continue;const f=c.find(({matcher:n})=>typeof n=="string"?n===s:n.test(s)),o=e[t-1],l=e[t+1];if(f&&o.tag===l.tag&&o.nesting===1&&l.nesting===-1){const n=f.replacer({tag:o.tag,content:r.content,attrs:Object.fromEntries(o.attrs||[])});n&&(o.tag=l.tag=n.tag,o.attrs=Object.entries(n.attrs),r.content=n.content),t+=2}}},h=(e,c={})=>{if(c.config?.length==0)return;const g=({env:t,tokens:i})=>{const r=c.localConfigGetter?.(t)??[];i.forEach(({type:s,children:a})=>{s==="inline"&&a&&p(a,[...r,...c.config??[]])})};e.core.ruler.push("stylize_tag",g)};export{h as stylize};
//# sourceMappingURL=index.mjs.map
